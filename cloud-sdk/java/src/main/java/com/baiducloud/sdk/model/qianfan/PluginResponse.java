/*
 * 千帆SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baiducloud.sdk.model.qianfan;

import java.util.Objects;
import com.baiducloud.sdk.model.qianfan.Usage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.baiducloud.sdk.JSON;

/**
 * PluginResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.BaiduCtsQianfanJavaCodegen")
public class PluginResponse {
  public static final String SERIALIZED_NAME_LOG_ID = "log_id";
  @SerializedName(SERIALIZED_NAME_LOG_ID)
  private Integer logId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_SENTENCE_ID = "sentence_id";
  @SerializedName(SERIALIZED_NAME_SENTENCE_ID)
  private Integer sentenceId;

  public static final String SERIALIZED_NAME_IS_END = "is_end";
  @SerializedName(SERIALIZED_NAME_IS_END)
  private Boolean isEnd;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_IS_TRUNCATED = "is_truncated";
  @SerializedName(SERIALIZED_NAME_IS_TRUNCATED)
  private Boolean isTruncated;

  public static final String SERIALIZED_NAME_NEED_CLEAR_HISTORY = "need_clear_history";
  @SerializedName(SERIALIZED_NAME_NEED_CLEAR_HISTORY)
  private Boolean needClearHistory;

  public static final String SERIALIZED_NAME_BAN_ROUND = "ban_round";
  @SerializedName(SERIALIZED_NAME_BAN_ROUND)
  private Integer banRound;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Usage usage;

  public static final String SERIALIZED_NAME_META_INFO = "meta_info";
  @SerializedName(SERIALIZED_NAME_META_INFO)
  private Object metaInfo;

  public PluginResponse() {
  }

  public PluginResponse logId(Integer logId) {
    
    this.logId = logId;
    return this;
  }

   /**
   * 唯一的log id，用于问题定位
   * @return logId
  **/
  @javax.annotation.Nullable
  public Integer getLogId() {
    return logId;
  }


  public void setLogId(Integer logId) {
    this.logId = logId;
  }


  public PluginResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * 本轮对话的id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PluginResponse _object(String _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * 回包类型。 chat.completion：多轮对话返回
   * @return _object
  **/
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    this._object = _object;
  }


  public PluginResponse created(Integer created) {
    
    this.created = created;
    return this;
  }

   /**
   * 时间戳
   * @return created
  **/
  @javax.annotation.Nullable
  public Integer getCreated() {
    return created;
  }


  public void setCreated(Integer created) {
    this.created = created;
  }


  public PluginResponse sentenceId(Integer sentenceId) {
    
    this.sentenceId = sentenceId;
    return this;
  }

   /**
   * 表示当前子句的序号，只有在流式接口模式下会返回该字段
   * @return sentenceId
  **/
  @javax.annotation.Nullable
  public Integer getSentenceId() {
    return sentenceId;
  }


  public void setSentenceId(Integer sentenceId) {
    this.sentenceId = sentenceId;
  }


  public PluginResponse isEnd(Boolean isEnd) {
    
    this.isEnd = isEnd;
    return this;
  }

   /**
   * 表示当前子句是否是最后一句，只有在流式接口模式下会返回该字段
   * @return isEnd
  **/
  @javax.annotation.Nullable
  public Boolean getIsEnd() {
    return isEnd;
  }


  public void setIsEnd(Boolean isEnd) {
    this.isEnd = isEnd;
  }


  public PluginResponse result(String result) {
    
    this.result = result;
    return this;
  }

   /**
   * 插件返回结果
   * @return result
  **/
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }


  public void setResult(String result) {
    this.result = result;
  }


  public PluginResponse isTruncated(Boolean isTruncated) {
    
    this.isTruncated = isTruncated;
    return this;
  }

   /**
   * 当前生成的结果是否被截断
   * @return isTruncated
  **/
  @javax.annotation.Nullable
  public Boolean getIsTruncated() {
    return isTruncated;
  }


  public void setIsTruncated(Boolean isTruncated) {
    this.isTruncated = isTruncated;
  }


  public PluginResponse needClearHistory(Boolean needClearHistory) {
    
    this.needClearHistory = needClearHistory;
    return this;
  }

   /**
   * 表示用户输入是否存在安全，是否关闭当前会话，清理历史会话信息 true：是，表示用户输入存在安全风险，建议关闭当前会话，清理历史会话信息 false：否，表示用户输入无安全风险
   * @return needClearHistory
  **/
  @javax.annotation.Nullable
  public Boolean getNeedClearHistory() {
    return needClearHistory;
  }


  public void setNeedClearHistory(Boolean needClearHistory) {
    this.needClearHistory = needClearHistory;
  }


  public PluginResponse banRound(Integer banRound) {
    
    this.banRound = banRound;
    return this;
  }

   /**
   * 当need_clear_history为true时，此字段会告知第几轮对话有敏感信息，如果是当前问题，ban_round &#x3D; -1
   * @return banRound
  **/
  @javax.annotation.Nullable
  public Integer getBanRound() {
    return banRound;
  }


  public void setBanRound(Integer banRound) {
    this.banRound = banRound;
  }


  public PluginResponse usage(Usage usage) {
    
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @javax.annotation.Nullable
  public Usage getUsage() {
    return usage;
  }


  public void setUsage(Usage usage) {
    this.usage = usage;
  }


  public PluginResponse metaInfo(Object metaInfo) {
    
    this.metaInfo = metaInfo;
    return this;
  }

   /**
   * Get metaInfo
   * @return metaInfo
  **/
  @javax.annotation.Nullable
  public Object getMetaInfo() {
    return metaInfo;
  }


  public void setMetaInfo(Object metaInfo) {
    this.metaInfo = metaInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PluginResponse instance itself
   */
  public PluginResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginResponse pluginResponse = (PluginResponse) o;
    return Objects.equals(this.logId, pluginResponse.logId) &&
        Objects.equals(this.id, pluginResponse.id) &&
        Objects.equals(this._object, pluginResponse._object) &&
        Objects.equals(this.created, pluginResponse.created) &&
        Objects.equals(this.sentenceId, pluginResponse.sentenceId) &&
        Objects.equals(this.isEnd, pluginResponse.isEnd) &&
        Objects.equals(this.result, pluginResponse.result) &&
        Objects.equals(this.isTruncated, pluginResponse.isTruncated) &&
        Objects.equals(this.needClearHistory, pluginResponse.needClearHistory) &&
        Objects.equals(this.banRound, pluginResponse.banRound) &&
        Objects.equals(this.usage, pluginResponse.usage) &&
        Objects.equals(this.metaInfo, pluginResponse.metaInfo)&&
        Objects.equals(this.additionalProperties, pluginResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logId, id, _object, created, sentenceId, isEnd, result, isTruncated, needClearHistory, banRound, usage, metaInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginResponse {\n");
    sb.append("    logId: ").append(toIndentedString(logId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    sentenceId: ").append(toIndentedString(sentenceId)).append("\n");
    sb.append("    isEnd: ").append(toIndentedString(isEnd)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    isTruncated: ").append(toIndentedString(isTruncated)).append("\n");
    sb.append("    needClearHistory: ").append(toIndentedString(needClearHistory)).append("\n");
    sb.append("    banRound: ").append(toIndentedString(banRound)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    metaInfo: ").append(toIndentedString(metaInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("log_id");
    openapiFields.add("id");
    openapiFields.add("object");
    openapiFields.add("created");
    openapiFields.add("sentence_id");
    openapiFields.add("is_end");
    openapiFields.add("result");
    openapiFields.add("is_truncated");
    openapiFields.add("need_clear_history");
    openapiFields.add("ban_round");
    openapiFields.add("usage");
    openapiFields.add("meta_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PluginResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PluginResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PluginResponse is not found in the empty JSON string", PluginResponse.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("usage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PluginResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PluginResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PluginResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PluginResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PluginResponse>() {
           @Override
           public void write(JsonWriter out, PluginResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PluginResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PluginResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PluginResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PluginResponse
  * @throws IOException if the JSON string is invalid with respect to PluginResponse
  */
  public static PluginResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PluginResponse.class);
  }

 /**
  * Convert an instance of PluginResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

