/*
 * 千帆SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baidubce.sdc.sdk.model.qianfan;

import java.util.Objects;
import com.baidubce.sdc.sdk.model.qianfan.ChatMessage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.baidubce.sdc.sdk.JSON;

/**
 * PluginRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.BaiduCtsQianfanJavaCodegen")
public class PluginRequest {
  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_PLUGINS = "plugins";
  @SerializedName(SERIALIZED_NAME_PLUGINS)
  private List<String> plugins;

  public static final String SERIALIZED_NAME_STREAM = "stream";
  @SerializedName(SERIALIZED_NAME_STREAM)
  private Boolean stream;

  public static final String SERIALIZED_NAME_LLM = "llm";
  @SerializedName(SERIALIZED_NAME_LLM)
  private Object llm;

  public static final String SERIALIZED_NAME_INPUT_VARIABLES = "input_variables";
  @SerializedName(SERIALIZED_NAME_INPUT_VARIABLES)
  private Object inputVariables;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private ChatMessage history;

  public static final String SERIALIZED_NAME_VERBOSE = "verbose";
  @SerializedName(SERIALIZED_NAME_VERBOSE)
  private Boolean verbose;

  public PluginRequest() {
  }

  public PluginRequest query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * 查询信息。说明： （1）成员不能为空 （2）长度不能超过1000个字符
   * @return query
  **/
  @javax.annotation.Nonnull
  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public PluginRequest plugins(List<String> plugins) {
    
    this.plugins = plugins;
    return this;
  }

  public PluginRequest addPluginsItem(String pluginsItem) {
    if (this.plugins == null) {
      this.plugins = new ArrayList<>();
    }
    this.plugins.add(pluginsItem);
    return this;
  }

   /**
   * 需要调用的插件ID列表
   * @return plugins
  **/
  @javax.annotation.Nullable
  public List<String> getPlugins() {
    return plugins;
  }


  public void setPlugins(List<String> plugins) {
    this.plugins = plugins;
  }


  public PluginRequest stream(Boolean stream) {
    
    this.stream = stream;
    return this;
  }

   /**
   * 是否以流式接口的形式返回数据，默认false，可选值如下： （1）true: 是，以流式接口的形式返回数据 （2）false：否，非流式接口形式返回数据
   * @return stream
  **/
  @javax.annotation.Nullable
  public Boolean getStream() {
    return stream;
  }


  public void setStream(Boolean stream) {
    this.stream = stream;
  }


  public PluginRequest llm(Object llm) {
    
    this.llm = llm;
    return this;
  }

   /**
   * llm相关参数，不指定参数时，使用调试过程中的默认值。 参数示例：\&quot;llm\&quot;:{\&quot;temperature\&quot;:0.1,\&quot;top_p\&quot;:1,\&quot;penalty_score\&quot;:1}
   * @return llm
  **/
  @javax.annotation.Nullable
  public Object getLlm() {
    return llm;
  }


  public void setLlm(Object llm) {
    this.llm = llm;
  }


  public PluginRequest inputVariables(Object inputVariables) {
    
    this.inputVariables = inputVariables;
    return this;
  }

   /**
   * 说明： （1）如果prompt中使用了变量，推理时可以填写具体值； （2）如果prompt中未使用变量，该字段不填。 参数示例：\&quot;input_variables\&quot;：{\&quot;key1\&quot;:\&quot;value1\&quot;,\&quot;key2\&quot;:\&quot;value2\&quot;,} key1、key2为配置时prompt中使用了变量key
   * @return inputVariables
  **/
  @javax.annotation.Nullable
  public Object getInputVariables() {
    return inputVariables;
  }


  public void setInputVariables(Object inputVariables) {
    this.inputVariables = inputVariables;
  }


  public PluginRequest history(ChatMessage history) {
    
    this.history = history;
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @javax.annotation.Nullable
  public ChatMessage getHistory() {
    return history;
  }


  public void setHistory(ChatMessage history) {
    this.history = history;
  }


  public PluginRequest verbose(Boolean verbose) {
    
    this.verbose = verbose;
    return this;
  }

   /**
   * 是否返回插件的原始请求信息，默认false，可选值如下： true：是，返回插件的原始请求信息meta_info false：否，不返回插件的原始请求信息meta_info
   * @return verbose
  **/
  @javax.annotation.Nullable
  public Boolean getVerbose() {
    return verbose;
  }


  public void setVerbose(Boolean verbose) {
    this.verbose = verbose;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PluginRequest instance itself
   */
  public PluginRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginRequest pluginRequest = (PluginRequest) o;
    return Objects.equals(this.query, pluginRequest.query) &&
        Objects.equals(this.plugins, pluginRequest.plugins) &&
        Objects.equals(this.stream, pluginRequest.stream) &&
        Objects.equals(this.llm, pluginRequest.llm) &&
        Objects.equals(this.inputVariables, pluginRequest.inputVariables) &&
        Objects.equals(this.history, pluginRequest.history) &&
        Objects.equals(this.verbose, pluginRequest.verbose)&&
        Objects.equals(this.additionalProperties, pluginRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, plugins, stream, llm, inputVariables, history, verbose, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginRequest {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    plugins: ").append(toIndentedString(plugins)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    llm: ").append(toIndentedString(llm)).append("\n");
    sb.append("    inputVariables: ").append(toIndentedString(inputVariables)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    verbose: ").append(toIndentedString(verbose)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("query");
    openapiFields.add("plugins");
    openapiFields.add("stream");
    openapiFields.add("llm");
    openapiFields.add("input_variables");
    openapiFields.add("history");
    openapiFields.add("verbose");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("query");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PluginRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PluginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PluginRequest is not found in the empty JSON string", PluginRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PluginRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("plugins") != null && !jsonObj.get("plugins").isJsonNull() && !jsonObj.get("plugins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `plugins` to be an array in the JSON string but got `%s`", jsonObj.get("plugins").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PluginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PluginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PluginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PluginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PluginRequest>() {
           @Override
           public void write(JsonWriter out, PluginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PluginRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PluginRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PluginRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PluginRequest
  * @throws IOException if the JSON string is invalid with respect to PluginRequest
  */
  public static PluginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PluginRequest.class);
  }

 /**
  * Convert an instance of PluginRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

