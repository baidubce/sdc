/*
 * 千帆SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baidubce.sdc.sdk.model.qianfan;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.baidubce.sdc.sdk.JSON;

/**
 * ImageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.BaiduCtsQianfanJavaCodegen")
public class ImageRequest {
  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  public static final String SERIALIZED_NAME_NEGATIVE_PROMPT = "negative_prompt";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_PROMPT)
  private String negativePrompt;

  /**
   * 生成图片长宽，默认值 1024x1024
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    _768X768("768x768"),
    
    _768X1024("768x1024"),
    
    _1024X768("1024x768"),
    
    _576X1024("576x1024"),
    
    _1024X576("1024x576");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  public static final String SERIALIZED_NAME_N = "n";
  @SerializedName(SERIALIZED_NAME_N)
  private Integer n;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private Integer steps;

  /**
   * 采样方式
   */
  @JsonAdapter(SamplerIndexEnum.Adapter.class)
  public enum SamplerIndexEnum {
    EULER("Euler"),
    
    EULER_A("Euler a"),
    
    DPM_2M("DPM++ 2M"),
    
    DPM_2M_KARRAS("DPM++ 2M Karras"),
    
    LMS_KARRAS("LMS Karras"),
    
    DPM_SDE("DPM++ SDE"),
    
    DPM_SDE_KARRAS("DPM++ SDE Karras"),
    
    DPM2_A_KARRAS("DPM2 a Karras"),
    
    HEUN("Heun"),
    
    DPM_2M_SDE("DPM++ 2M SDE"),
    
    DPM_2M_SDE_KARRAS("DPM++ 2M SDE Karras"),
    
    DPM2("DPM2"),
    
    DPM2_KARRAS("DPM2 Karras"),
    
    DPM2_A("DPM2 a"),
    
    LMS("LMS");

    private String value;

    SamplerIndexEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SamplerIndexEnum fromValue(String value) {
      for (SamplerIndexEnum b : SamplerIndexEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SamplerIndexEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SamplerIndexEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SamplerIndexEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SamplerIndexEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SamplerIndexEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMPLER_INDEX = "sampler_index";
  @SerializedName(SERIALIZED_NAME_SAMPLER_INDEX)
  private SamplerIndexEnum samplerIndex;

  public static final String SERIALIZED_NAME_SEED = "seed";
  @SerializedName(SERIALIZED_NAME_SEED)
  private Long seed;

  public static final String SERIALIZED_NAME_CFG_SCALE = "cfg_scale";
  @SerializedName(SERIALIZED_NAME_CFG_SCALE)
  private BigDecimal cfgScale;

  /**
   * 生成风格
   */
  @JsonAdapter(StyleEnum.Adapter.class)
  public enum StyleEnum {
    BASE("Base"),
    
    _3D_MODEL("3D Model"),
    
    ANALOG_FILM("Analog Film"),
    
    ANIME("Anime"),
    
    CINEMATIC("Cinematic"),
    
    COMIC_BOOK("Comic Book"),
    
    CRAFT_CLAY("Craft Clay"),
    
    DIGITAL_ART("Digital Art"),
    
    ENHANCE("Enhance"),
    
    FANTASY_ART("Fantasy Art"),
    
    LSOMETRIC("lsometric"),
    
    LINE_ART("Line Art"),
    
    LOWPOLY("Lowpoly"),
    
    NEONPUNK("Neonpunk"),
    
    ORIGAMI("Origami"),
    
    PHOTOGRAPHIC("Photographic"),
    
    PIXEL_ART("Pixel Art"),
    
    TEXTURE("Texture");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StyleEnum fromValue(String value) {
      for (StyleEnum b : StyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private StyleEnum style;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ImageRequest() {
  }

  public ImageRequest prompt(String prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * 提示词，即用户希望图片包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个
   * @return prompt
  **/
  @javax.annotation.Nonnull
  public String getPrompt() {
    return prompt;
  }


  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public ImageRequest negativePrompt(String negativePrompt) {
    
    this.negativePrompt = negativePrompt;
    return this;
  }

   /**
   * 反向提示词，即用户希望图片不包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个
   * @return negativePrompt
  **/
  @javax.annotation.Nullable
  public String getNegativePrompt() {
    return negativePrompt;
  }


  public void setNegativePrompt(String negativePrompt) {
    this.negativePrompt = negativePrompt;
  }


  public ImageRequest size(SizeEnum size) {
    
    this.size = size;
    return this;
  }

   /**
   * 生成图片长宽，默认值 1024x1024
   * @return size
  **/
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }


  public void setSize(SizeEnum size) {
    this.size = size;
  }


  public ImageRequest n(Integer n) {
    
    this.n = n;
    return this;
  }

   /**
   * 生成图片数量，说明： · 默认值为1 · 取值范围为1-4 · 单次生成的图片较多及请求较频繁可能导致请求超时
   * minimum: 1
   * maximum: 4
   * @return n
  **/
  @javax.annotation.Nullable
  public Integer getN() {
    return n;
  }


  public void setN(Integer n) {
    this.n = n;
  }


  public ImageRequest steps(Integer steps) {
    
    this.steps = steps;
    return this;
  }

   /**
   * 迭代轮次，说明： · 默认值为20 · 取值范围为10-50
   * minimum: 10
   * maximum: 50
   * @return steps
  **/
  @javax.annotation.Nullable
  public Integer getSteps() {
    return steps;
  }


  public void setSteps(Integer steps) {
    this.steps = steps;
  }


  public ImageRequest samplerIndex(SamplerIndexEnum samplerIndex) {
    
    this.samplerIndex = samplerIndex;
    return this;
  }

   /**
   * 采样方式
   * @return samplerIndex
  **/
  @javax.annotation.Nullable
  public SamplerIndexEnum getSamplerIndex() {
    return samplerIndex;
  }


  public void setSamplerIndex(SamplerIndexEnum samplerIndex) {
    this.samplerIndex = samplerIndex;
  }


  public ImageRequest seed(Long seed) {
    
    this.seed = seed;
    return this;
  }

   /**
   * 随机种子，说明： · 不设置时，自动生成随机数 · 取值范围 [0, 4294967295]
   * minimum: 0
   * maximum: 4294967295
   * @return seed
  **/
  @javax.annotation.Nullable
  public Long getSeed() {
    return seed;
  }


  public void setSeed(Long seed) {
    this.seed = seed;
  }


  public ImageRequest cfgScale(BigDecimal cfgScale) {
    
    this.cfgScale = cfgScale;
    return this;
  }

   /**
   * 提示词相关性，说明：默认值为5，取值范围0-30
   * minimum: 0
   * maximum: 30
   * @return cfgScale
  **/
  @javax.annotation.Nullable
  public BigDecimal getCfgScale() {
    return cfgScale;
  }


  public void setCfgScale(BigDecimal cfgScale) {
    this.cfgScale = cfgScale;
  }


  public ImageRequest style(StyleEnum style) {
    
    this.style = style;
    return this;
  }

   /**
   * 生成风格
   * @return style
  **/
  @javax.annotation.Nullable
  public StyleEnum getStyle() {
    return style;
  }


  public void setStyle(StyleEnum style) {
    this.style = style;
  }


  public ImageRequest userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * 表示最终用户的唯一标识符，可以监视和检测滥用行为，防止接口恶意调用
   * @return userId
  **/
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImageRequest instance itself
   */
  public ImageRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageRequest imageRequest = (ImageRequest) o;
    return Objects.equals(this.prompt, imageRequest.prompt) &&
        Objects.equals(this.negativePrompt, imageRequest.negativePrompt) &&
        Objects.equals(this.size, imageRequest.size) &&
        Objects.equals(this.n, imageRequest.n) &&
        Objects.equals(this.steps, imageRequest.steps) &&
        Objects.equals(this.samplerIndex, imageRequest.samplerIndex) &&
        Objects.equals(this.seed, imageRequest.seed) &&
        Objects.equals(this.cfgScale, imageRequest.cfgScale) &&
        Objects.equals(this.style, imageRequest.style) &&
        Objects.equals(this.userId, imageRequest.userId)&&
        Objects.equals(this.additionalProperties, imageRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prompt, negativePrompt, size, n, steps, samplerIndex, seed, cfgScale, style, userId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageRequest {\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    samplerIndex: ").append(toIndentedString(samplerIndex)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    cfgScale: ").append(toIndentedString(cfgScale)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prompt");
    openapiFields.add("negative_prompt");
    openapiFields.add("size");
    openapiFields.add("n");
    openapiFields.add("steps");
    openapiFields.add("sampler_index");
    openapiFields.add("seed");
    openapiFields.add("cfg_scale");
    openapiFields.add("style");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("prompt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ImageRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageRequest is not found in the empty JSON string", ImageRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
      if ((jsonObj.get("negative_prompt") != null && !jsonObj.get("negative_prompt").isJsonNull()) && !jsonObj.get("negative_prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negative_prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negative_prompt").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("sampler_index") != null && !jsonObj.get("sampler_index").isJsonNull()) && !jsonObj.get("sampler_index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampler_index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampler_index").toString()));
      }
      // validate the optional field `sampler_index`
      if (jsonObj.get("sampler_index") != null && !jsonObj.get("sampler_index").isJsonNull()) {
        SamplerIndexEnum.validateJsonElement(jsonObj.get("sampler_index"));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        StyleEnum.validateJsonElement(jsonObj.get("style"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageRequest>() {
           @Override
           public void write(JsonWriter out, ImageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ImageRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImageRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImageRequest
  * @throws IOException if the JSON string is invalid with respect to ImageRequest
  */
  public static ImageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageRequest.class);
  }

 /**
  * Convert an instance of ImageRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

