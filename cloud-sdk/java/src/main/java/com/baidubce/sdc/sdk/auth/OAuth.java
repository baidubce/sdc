/*
 * 千帆SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baidubce.sdc.sdk.auth;

import com.baidubce.sdc.sdk.ApiException;
import com.baidubce.sdc.sdk.JSON;
import com.baidubce.sdc.sdk.Pair;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.gson.annotations.SerializedName;
import okhttp3.*;

import java.io.IOException;
import java.net.URI;
import java.util.Map;
import java.util.List;

public class OAuth implements Authentication {
    public String apiKey;
    public String secretKey;
    public String basePath;

    private AccessToken accessToken = new AccessToken();

    public OAuth(String apiKey, String secretKey) {
        this(apiKey, secretKey, "https://aip.baidubce.com");
    }

    public OAuth(String apiKey, String secretKey, String basePath) {
        if (apiKey == null || secretKey == null || basePath == null) {
            throw new IllegalArgumentException("parameter cantnot be null");
        }
        this.apiKey = apiKey;
        this.secretKey = secretKey;
        this.basePath = basePath;
    }

    @Override
    public String getAuthName() {
        return "OAuth";
    }

    @Override
    public void applyToParams(OkHttpClient httpClient, List<Pair> queryParams, Map<String, String> headerParams, Map<String, String> cookieParams,
                              String payload, String method, URI uri) throws ApiException {
        if (accessToken.isExpire()) {
            if (apiKey == null || secretKey == null) {
                throw new ApiException(-1, "OAuth apiKey and secretKey cannot be empty （请填写正确的apiKey和secretKey）");
            }
            try {
                MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                RequestBody body = RequestBody.create(mediaType, "grant_type=client_credentials&client_id=" + apiKey
                        + "&client_secret=" + secretKey);
                Request request = new Request.Builder()
                        .url(new URI(basePath).resolve("/oauth/2.0/token").toString())
                        .method("POST", body)
                        .addHeader("Content-Type", "application/x-www-form-urlencoded")
                        .build();
                Response response = httpClient.newCall(request).execute();
                if (response.isSuccessful()) {
                    String respBody = response.body().string();
                    AccessToken accessToken = JSON.deserialize(respBody, AccessToken.class);
                    if (accessToken == null || accessToken.getValue() == null) {
                        throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);
                    }
                    accessToken.init();
                    this.accessToken = accessToken;
                } else {
                    String respBody = null;
                    if (response.body() != null) {
                        try {
                            respBody = response.body().string();
                        } catch (IOException e) {
                            throw new ApiException(response.message(), e, response.code(), response.headers().toMultimap());
                        }
                    }
                    throw new ApiException(response.message(), response.code(), response.headers().toMultimap(), respBody);
                }
            } catch (Exception e) {
                throw new ApiException(e);
            }
        }
        queryParams.add(new Pair("access_token", this.accessToken.getValue()));
    }

    private class AccessToken {
        @SerializedName("access_token")
        private String value;
        @JsonIgnore
        private long expiryTime = 0;

        public String getValue() {
            return value;
        }

        public void setValue(String accessToken) {
            this.value = accessToken;
        }

        public void init() throws ApiException {
            if (this.value != null && this.value != "") {
                String timestampStr = this.value.split("\\.")[3];
                long timestamp = Long.parseLong(timestampStr);
                expiryTime = (timestamp - 300) * 1000;
            } else {
                throw new ApiException("accessToken value is null");
            }
        }

        public boolean isExpire() {
            if (expiryTime == 0) {
                return true;
            }
            long currentTimeInMillis = System.currentTimeMillis();
            if (currentTimeInMillis > expiryTime) {
                return true;
            }
            return false;
        }
    }
}
