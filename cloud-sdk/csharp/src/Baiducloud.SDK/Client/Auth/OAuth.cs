using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Baiducloud.SDK.Client.Auth
{
    // NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    // https://openapi-generator.tech
    // Do not edit the class manually.

    public class OAuth : IAuthentication
    {
        public string ApiKey { get; }
        public string SecretKey { get; }
        public string BasePath { get; }

        private AccessToken accessToken = new AccessToken();

        public OAuth(string apiKey, string secretKey, string basePath = "https://aip.baidubce.com")
        {
            ApiKey = apiKey;
            SecretKey = secretKey;
            BasePath = basePath;
        }

        public string CurrentAccessToken => accessToken.Value;
        
        public string AuthName => "OAuth";

        public bool ApplyToParams(HttpClient httpClient, RequestOptions requestOptions, HttpMethod method, Uri uri)
        {
            if (accessToken.IsExpire())
            {
                if (string.IsNullOrEmpty(ApiKey) || string.IsNullOrEmpty(SecretKey))
                {
                    return false;
                }
                try
                {
                    var content = new FormUrlEncodedContent(new[]
                    {
                        new KeyValuePair<string, string>("grant_type", "client_credentials"),
                        new KeyValuePair<string, string>("client_id", ApiKey),
                        new KeyValuePair<string, string>("client_secret", SecretKey)
                    });

                    HttpResponseMessage response = httpClient.PostAsync($"{BasePath}/oauth/2.0/token", content).Result;
                    if (response.IsSuccessStatusCode)
                    {
                        string respBody = response.Content.ReadAsStringAsync().Result;
                        AccessToken newAccessToken = JsonConvert.DeserializeObject<AccessToken>(respBody);
                        if (newAccessToken == null || string.IsNullOrEmpty(newAccessToken.Value))
                        {
                            throw new ApiException(-1, "Failed to deserialize access token.");
                        }
                        newAccessToken.Init();
                        accessToken = newAccessToken;
                    }
                    else
                    {
                        string respBody = response.Content.ReadAsStringAsync().Result;
                        throw new ApiException(-1, $"Error retrieving access token: {response.ReasonPhrase} {respBody}");
                    }
                }
                catch (ApiException)
                {
                    throw;
                }
                catch (Exception e)
                {
                    throw new ApiException(-1, "Exception when calling the token endpoint.", e);
                }
            }
            requestOptions.QueryParameters.Add("access_token", accessToken.Value);
            return true;
        }

        private class AccessToken
        {
            [JsonProperty("access_token")]
            public string Value { get; set; }

            [JsonIgnore]
            public long ExpiryTime { get; private set; }

            public void Init()
            {
                if (!string.IsNullOrEmpty(Value))
                {
                    string timestampStr = Value.Split('.')[3];
                    long timestamp = long.Parse(timestampStr);
                    ExpiryTime = (timestamp - 300) * 1000;
                }
                else
                {
                    throw new ApiException(-1, "AccessToken value is null");
                }
            }

            public bool IsExpire()
            {
                if (ExpiryTime == 0)
                {
                    return true;
                }
                long currentTimeInMillis = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                return currentTimeInMillis > ExpiryTime;
            }
        }
        
    }
}
