/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Baiducloud.SDK.Client;
using Baiducloud.SDK.Model.Qianfan;

namespace Baiducloud.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQianfanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 调用对话类大模型
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <returns>ChatResponse</returns>
        ChatResponse Chat(ChatLlm llm, ChatRequest chatRequest);

        /// <summary>
        /// 调用对话类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <returns>ApiResponse of ChatResponse</returns>
        ApiResponse<ChatResponse> ChatWithHttpInfo(ChatLlm llm, ChatRequest chatRequest);
        /// <summary>
        /// 调用续写类大模型
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <returns>CompletionResponse</returns>
        CompletionResponse Completion(CompletionLlm llm, CompletionRequest completionRequest);

        /// <summary>
        /// 调用续写类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <returns>ApiResponse of CompletionResponse</returns>
        ApiResponse<CompletionResponse> CompletionWithHttpInfo(CompletionLlm llm, CompletionRequest completionRequest);
        /// <summary>
        /// 调用支持向量计算类的大模型接口
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <returns>EmbeddingResponse</returns>
        EmbeddingResponse Embedding(EmbeddingLlm llm, EmbeddingRequest embeddingRequest);

        /// <summary>
        /// 调用支持向量计算类的大模型接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <returns>ApiResponse of EmbeddingResponse</returns>
        ApiResponse<EmbeddingResponse> EmbeddingWithHttpInfo(EmbeddingLlm llm, EmbeddingRequest embeddingRequest);
        /// <summary>
        /// 调用插件接口
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <returns>PluginResponse</returns>
        PluginResponse Plugin(string serverPath, PluginRequest pluginRequest);

        /// <summary>
        /// 调用插件接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <returns>ApiResponse of PluginResponse</returns>
        ApiResponse<PluginResponse> PluginWithHttpInfo(string serverPath, PluginRequest pluginRequest);
        /// <summary>
        /// 调用文生图类大模型
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <returns>ImageResponse</returns>
        ImageResponse Text2image(ImageLlm llm, ImageRequest imageRequest);

        /// <summary>
        /// 调用文生图类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <returns>ApiResponse of ImageResponse</returns>
        ApiResponse<ImageResponse> Text2imageWithHttpInfo(ImageLlm llm, ImageRequest imageRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQianfanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 调用对话类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatResponse</returns>
        System.Threading.Tasks.Task<ChatResponse> ChatAsync(ChatLlm llm, ChatRequest chatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 调用对话类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatResponse</returns>
        System.Threading.Tasks.Task<IAsyncEnumerable<ChatResponse>> ChatStream(ChatLlm llm, ChatRequest chatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 调用对话类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatResponse>> ChatWithHttpInfoAsync(ChatLlm llm, ChatRequest chatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 调用续写类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletionResponse</returns>
        System.Threading.Tasks.Task<CompletionResponse> CompletionAsync(CompletionLlm llm, CompletionRequest completionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 调用续写类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletionResponse</returns>
        System.Threading.Tasks.Task<IAsyncEnumerable<CompletionResponse>> CompletionStream(CompletionLlm llm, CompletionRequest completionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 调用续写类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompletionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompletionResponse>> CompletionWithHttpInfoAsync(CompletionLlm llm, CompletionRequest completionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 调用支持向量计算类的大模型接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddingResponse</returns>
        System.Threading.Tasks.Task<EmbeddingResponse> EmbeddingAsync(EmbeddingLlm llm, EmbeddingRequest embeddingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));


        /// <summary>
        /// 调用支持向量计算类的大模型接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmbeddingResponse>> EmbeddingWithHttpInfoAsync(EmbeddingLlm llm, EmbeddingRequest embeddingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 调用插件接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginResponse</returns>
        System.Threading.Tasks.Task<PluginResponse> PluginAsync(string serverPath, PluginRequest pluginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 调用插件接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginResponse</returns>
        System.Threading.Tasks.Task<IAsyncEnumerable<PluginResponse>> PluginStream(string serverPath, PluginRequest pluginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 调用插件接口
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluginResponse>> PluginWithHttpInfoAsync(string serverPath, PluginRequest pluginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 调用文生图类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageResponse</returns>
        System.Threading.Tasks.Task<ImageResponse> Text2imageAsync(ImageLlm llm, ImageRequest imageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));


        /// <summary>
        /// 调用文生图类大模型
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageResponse>> Text2imageWithHttpInfoAsync(ImageLlm llm, ImageRequest imageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQianfanApi : IQianfanApiSync, IQianfanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QianfanApi : IDisposable, IQianfanApi
    {
        private Baiducloud.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public QianfanApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public QianfanApi(string basePath)
        {
            this.Configuration = Baiducloud.SDK.Client.Configuration.MergeConfigurations(
                Baiducloud.SDK.Client.GlobalConfiguration.Instance,
                new Baiducloud.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Baiducloud.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Baiducloud.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public QianfanApi(Baiducloud.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Baiducloud.SDK.Client.Configuration.MergeConfigurations(
                Baiducloud.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Baiducloud.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Baiducloud.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QianfanApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QianfanApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Baiducloud.SDK.Client.Configuration.MergeConfigurations(
                Baiducloud.SDK.Client.GlobalConfiguration.Instance,
                new Baiducloud.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Baiducloud.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Baiducloud.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QianfanApi(HttpClient client, Baiducloud.SDK.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Baiducloud.SDK.Client.Configuration.MergeConfigurations(
                Baiducloud.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Baiducloud.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Baiducloud.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QianfanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public QianfanApi(Baiducloud.SDK.Client.ISynchronousClient client, Baiducloud.SDK.Client.IAsynchronousClient asyncClient, Baiducloud.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Baiducloud.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Baiducloud.SDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Baiducloud.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Baiducloud.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Baiducloud.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Baiducloud.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 调用对话类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <returns>ChatResponse</returns>
        public ChatResponse Chat(ChatLlm llm, ChatRequest chatRequest)
        {
            if (chatRequest.Stream)
            {
                throw new ArgumentException("Stream call please use ChatStream method.(流式调用请使用ChatStream方法)");
            }
            Baiducloud.SDK.Client.ApiResponse<ChatResponse> localVarResponse = ChatWithHttpInfo(llm, chatRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用对话类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <returns>ApiResponse of ChatResponse</returns>
        public Baiducloud.SDK.Client.ApiResponse<ChatResponse> ChatWithHttpInfo(ChatLlm llm, ChatRequest chatRequest)
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Chat");

            // verify the required parameter 'chatRequest' is set
            if (chatRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'chatRequest' when calling QianfanApi->Chat");

            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = chatRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/{llm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Chat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用对话类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatResponse</returns>
        public async System.Threading.Tasks.Task<ChatResponse> ChatAsync(ChatLlm llm, ChatRequest chatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (chatRequest.Stream)
            {
                throw new ArgumentException("Stream call please use ChatStream method.(流式调用请使用ChatStream方法)");
            }
            Baiducloud.SDK.Client.ApiResponse<ChatResponse> localVarResponse = await ChatWithHttpInfoAsync(llm, chatRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用对话类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatResponse</returns>
        public async System.Threading.Tasks.Task<IAsyncEnumerable<ChatResponse>> ChatStream(ChatLlm llm, ChatRequest chatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            chatRequest.Stream = true;
            Baiducloud.SDK.Client.ApiResponse<ChatResponse> localVarResponse = await ChatWithHttpInfoAsync(llm, chatRequest, cancellationToken).ConfigureAwait(false);
            if (localVarResponse.SseData == null)
            {
                return localVarResponse.Data.ToAsyncEnumerable();
            }
            return localVarResponse.SseData;
        }

        /// <summary>
        /// 调用对话类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="chatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatResponse)</returns>
        public async System.Threading.Tasks.Task<Baiducloud.SDK.Client.ApiResponse<ChatResponse>> ChatWithHttpInfoAsync(ChatLlm llm, ChatRequest chatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Chat");

            // verify the required parameter 'chatRequest' is set
            if (chatRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'chatRequest' when calling QianfanApi->Chat");


            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = chatRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/{llm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Chat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用续写类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <returns>CompletionResponse</returns>
        public CompletionResponse Completion(CompletionLlm llm, CompletionRequest completionRequest)
        {
            if (completionRequest.Stream)
            {
                throw new ArgumentException("Stream call please use CompletionStream method.(流式调用请使用CompletionStream方法)");
            }
            Baiducloud.SDK.Client.ApiResponse<CompletionResponse> localVarResponse = CompletionWithHttpInfo(llm, completionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用续写类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <returns>ApiResponse of CompletionResponse</returns>
        public Baiducloud.SDK.Client.ApiResponse<CompletionResponse> CompletionWithHttpInfo(CompletionLlm llm, CompletionRequest completionRequest)
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Completion");

            // verify the required parameter 'completionRequest' is set
            if (completionRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'completionRequest' when calling QianfanApi->Completion");

            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = completionRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request
            var localVarResponse = this.Client.Post<CompletionResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/completions/{llm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Completion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用续写类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletionResponse</returns>
        public async System.Threading.Tasks.Task<CompletionResponse> CompletionAsync(CompletionLlm llm, CompletionRequest completionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (completionRequest.Stream)
            {
                throw new ArgumentException("Stream call please use CompletionStream method.(流式调用请使用CompletionStream方法)");
            }
            Baiducloud.SDK.Client.ApiResponse<CompletionResponse> localVarResponse = await CompletionWithHttpInfoAsync(llm, completionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用续写类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompletionResponse</returns>
        public async System.Threading.Tasks.Task<IAsyncEnumerable<CompletionResponse>> CompletionStream(CompletionLlm llm, CompletionRequest completionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            completionRequest.Stream = true;
            Baiducloud.SDK.Client.ApiResponse<CompletionResponse> localVarResponse = await CompletionWithHttpInfoAsync(llm, completionRequest, cancellationToken).ConfigureAwait(false);
            if (localVarResponse.SseData == null)
            {
                return localVarResponse.Data.ToAsyncEnumerable();
            }
            return localVarResponse.SseData;
        }

        /// <summary>
        /// 调用续写类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="completionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompletionResponse)</returns>
        public async System.Threading.Tasks.Task<Baiducloud.SDK.Client.ApiResponse<CompletionResponse>> CompletionWithHttpInfoAsync(CompletionLlm llm, CompletionRequest completionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Completion");

            // verify the required parameter 'completionRequest' is set
            if (completionRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'completionRequest' when calling QianfanApi->Completion");


            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = completionRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CompletionResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/completions/{llm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Completion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用支持向量计算类的大模型接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <returns>EmbeddingResponse</returns>
        public EmbeddingResponse Embedding(EmbeddingLlm llm, EmbeddingRequest embeddingRequest)
        {
            
            Baiducloud.SDK.Client.ApiResponse<EmbeddingResponse> localVarResponse = EmbeddingWithHttpInfo(llm, embeddingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用支持向量计算类的大模型接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <returns>ApiResponse of EmbeddingResponse</returns>
        public Baiducloud.SDK.Client.ApiResponse<EmbeddingResponse> EmbeddingWithHttpInfo(EmbeddingLlm llm, EmbeddingRequest embeddingRequest)
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Embedding");

            // verify the required parameter 'embeddingRequest' is set
            if (embeddingRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'embeddingRequest' when calling QianfanApi->Embedding");

            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = embeddingRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmbeddingResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/embeddings/{llm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Embedding", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用支持向量计算类的大模型接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmbeddingResponse</returns>
        public async System.Threading.Tasks.Task<EmbeddingResponse> EmbeddingAsync(EmbeddingLlm llm, EmbeddingRequest embeddingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            
            Baiducloud.SDK.Client.ApiResponse<EmbeddingResponse> localVarResponse = await EmbeddingWithHttpInfoAsync(llm, embeddingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }


        /// <summary>
        /// 调用支持向量计算类的大模型接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="embeddingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmbeddingResponse)</returns>
        public async System.Threading.Tasks.Task<Baiducloud.SDK.Client.ApiResponse<EmbeddingResponse>> EmbeddingWithHttpInfoAsync(EmbeddingLlm llm, EmbeddingRequest embeddingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Embedding");

            // verify the required parameter 'embeddingRequest' is set
            if (embeddingRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'embeddingRequest' when calling QianfanApi->Embedding");


            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = embeddingRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EmbeddingResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/embeddings/{llm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Embedding", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用插件接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <returns>PluginResponse</returns>
        public PluginResponse Plugin(string serverPath, PluginRequest pluginRequest)
        {
            if (pluginRequest.Stream)
            {
                throw new ArgumentException("Stream call please use PluginStream method.(流式调用请使用PluginStream方法)");
            }
            Baiducloud.SDK.Client.ApiResponse<PluginResponse> localVarResponse = PluginWithHttpInfo(serverPath, pluginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用插件接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <returns>ApiResponse of PluginResponse</returns>
        public Baiducloud.SDK.Client.ApiResponse<PluginResponse> PluginWithHttpInfo(string serverPath, PluginRequest pluginRequest)
        {
            // verify the required parameter 'serverPath' is set
            if (serverPath == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'serverPath' when calling QianfanApi->Plugin");

            // verify the required parameter 'pluginRequest' is set
            if (pluginRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'pluginRequest' when calling QianfanApi->Plugin");

            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverPath", Baiducloud.SDK.Client.ClientUtils.ParameterToString(serverPath)); // path parameter
            localVarRequestOptions.Data = pluginRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request
            var localVarResponse = this.Client.Post<PluginResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/plugin/{serverPath}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Plugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用插件接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginResponse</returns>
        public async System.Threading.Tasks.Task<PluginResponse> PluginAsync(string serverPath, PluginRequest pluginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (pluginRequest.Stream)
            {
                throw new ArgumentException("Stream call please use PluginStream method.(流式调用请使用PluginStream方法)");
            }
            Baiducloud.SDK.Client.ApiResponse<PluginResponse> localVarResponse = await PluginWithHttpInfoAsync(serverPath, pluginRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用插件接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluginResponse</returns>
        public async System.Threading.Tasks.Task<IAsyncEnumerable<PluginResponse>> PluginStream(string serverPath, PluginRequest pluginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pluginRequest.Stream = true;
            Baiducloud.SDK.Client.ApiResponse<PluginResponse> localVarResponse = await PluginWithHttpInfoAsync(serverPath, pluginRequest, cancellationToken).ConfigureAwait(false);
            if (localVarResponse.SseData == null)
            {
                return localVarResponse.Data.ToAsyncEnumerable();
            }
            return localVarResponse.SseData;
        }

        /// <summary>
        /// 调用插件接口 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverPath"></param>
        /// <param name="pluginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluginResponse)</returns>
        public async System.Threading.Tasks.Task<Baiducloud.SDK.Client.ApiResponse<PluginResponse>> PluginWithHttpInfoAsync(string serverPath, PluginRequest pluginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serverPath' is set
            if (serverPath == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'serverPath' when calling QianfanApi->Plugin");

            // verify the required parameter 'pluginRequest' is set
            if (pluginRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'pluginRequest' when calling QianfanApi->Plugin");


            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serverPath", Baiducloud.SDK.Client.ClientUtils.ParameterToString(serverPath)); // path parameter
            localVarRequestOptions.Data = pluginRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PluginResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/plugin/{serverPath}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Plugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用文生图类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <returns>ImageResponse</returns>
        public ImageResponse Text2image(ImageLlm llm, ImageRequest imageRequest)
        {
            
            Baiducloud.SDK.Client.ApiResponse<ImageResponse> localVarResponse = Text2imageWithHttpInfo(llm, imageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 调用文生图类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <returns>ApiResponse of ImageResponse</returns>
        public Baiducloud.SDK.Client.ApiResponse<ImageResponse> Text2imageWithHttpInfo(ImageLlm llm, ImageRequest imageRequest)
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Text2image");

            // verify the required parameter 'imageRequest' is set
            if (imageRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'imageRequest' when calling QianfanApi->Text2image");

            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = imageRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImageResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/text2image/{llm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Text2image", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 调用文生图类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageResponse</returns>
        public async System.Threading.Tasks.Task<ImageResponse> Text2imageAsync(ImageLlm llm, ImageRequest imageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            
            Baiducloud.SDK.Client.ApiResponse<ImageResponse> localVarResponse = await Text2imageWithHttpInfoAsync(llm, imageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }


        /// <summary>
        /// 调用文生图类大模型 
        /// </summary>
        /// <exception cref="Baiducloud.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="llm"></param>
        /// <param name="imageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageResponse)</returns>
        public async System.Threading.Tasks.Task<Baiducloud.SDK.Client.ApiResponse<ImageResponse>> Text2imageWithHttpInfoAsync(ImageLlm llm, ImageRequest imageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'llm' is set
            if (llm == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'llm' when calling QianfanApi->Text2image");

            // verify the required parameter 'imageRequest' is set
            if (imageRequest == null)
                throw new Baiducloud.SDK.Client.ApiException(400, "Missing required parameter 'imageRequest' when calling QianfanApi->Text2image");


            Baiducloud.SDK.Client.RequestOptions localVarRequestOptions = new Baiducloud.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Baiducloud.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Baiducloud.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("llm", Baiducloud.SDK.Client.ClientUtils.ParameterToString(llm)); // path parameter
            localVarRequestOptions.Data = imageRequest;
            localVarRequestOptions.QueryParameters.Add("source", "baiducloud-sdk");
            localVarRequestOptions.QueryParameters.Add("appName", "csharp");
            localVarRequestOptions.QueryParameters.Add("sourceVer", GlobalConfiguration.Version);
            localVarRequestOptions.AuthNames.Add("IamAuth");
            localVarRequestOptions.AuthNames.Add("OAuth");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ImageResponse>("/rpc/2.0/ai_custom/v1/wenxinworkshop/text2image/{llm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Text2image", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
