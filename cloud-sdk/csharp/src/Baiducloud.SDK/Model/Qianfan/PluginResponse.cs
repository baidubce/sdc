/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// PluginResponse
    /// </summary>
    [DataContract(Name = "pluginResponse")]
    public partial class PluginResponse : IEquatable<PluginResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PluginResponse()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginResponse" /> class.
        /// </summary>
        /// <param name="logId">唯一的log id，用于问题定位.</param>
        /// <param name="id">本轮对话的id.</param>
        /// <param name="varObject">回包类型。 chat.completion：多轮对话返回.</param>
        /// <param name="created">时间戳.</param>
        /// <param name="sentenceId">表示当前子句的序号，只有在流式接口模式下会返回该字段.</param>
        /// <param name="isEnd">表示当前子句是否是最后一句，只有在流式接口模式下会返回该字段.</param>
        /// <param name="result">插件返回结果.</param>
        /// <param name="isTruncated">当前生成的结果是否被截断.</param>
        /// <param name="needClearHistory">表示用户输入是否存在安全，是否关闭当前会话，清理历史会话信息 true：是，表示用户输入存在安全风险，建议关闭当前会话，清理历史会话信息 false：否，表示用户输入无安全风险.</param>
        /// <param name="banRound">当need_clear_history为true时，此字段会告知第几轮对话有敏感信息，如果是当前问题，ban_round &#x3D; -1.</param>
        /// <param name="usage">usage.</param>
        /// <param name="metaInfo">metaInfo.</param>
        public PluginResponse(int logId = default(int), string id = default(string), string varObject = default(string), int created = default(int), int sentenceId = default(int), bool isEnd = default(bool), string result = default(string), bool isTruncated = default(bool), bool needClearHistory = default(bool), int banRound = default(int), Usage usage = default(Usage), Object metaInfo = default(Object))
        {
            this.LogId = logId;
            this.Id = id;
            this.VarObject = varObject;
            this.Created = created;
            this.SentenceId = sentenceId;
            this.IsEnd = isEnd;
            this.Result = result;
            this.IsTruncated = isTruncated;
            this.NeedClearHistory = needClearHistory;
            this.BanRound = banRound;
            this.Usage = usage;
            this.MetaInfo = metaInfo;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 唯一的log id，用于问题定位
        /// </summary>
        /// <value>唯一的log id，用于问题定位</value>
        [DataMember(Name = "log_id", EmitDefaultValue = false)]
        public int LogId { get; set; }

        /// <summary>
        /// 本轮对话的id
        /// </summary>
        /// <value>本轮对话的id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// 回包类型。 chat.completion：多轮对话返回
        /// </summary>
        /// <value>回包类型。 chat.completion：多轮对话返回</value>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public string VarObject { get; set; }

        /// <summary>
        /// 时间戳
        /// </summary>
        /// <value>时间戳</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public int Created { get; set; }

        /// <summary>
        /// 表示当前子句的序号，只有在流式接口模式下会返回该字段
        /// </summary>
        /// <value>表示当前子句的序号，只有在流式接口模式下会返回该字段</value>
        [DataMember(Name = "sentence_id", EmitDefaultValue = false)]
        public int SentenceId { get; set; }

        /// <summary>
        /// 表示当前子句是否是最后一句，只有在流式接口模式下会返回该字段
        /// </summary>
        /// <value>表示当前子句是否是最后一句，只有在流式接口模式下会返回该字段</value>
        [DataMember(Name = "is_end", EmitDefaultValue = true)]
        public bool IsEnd { get; set; }

        /// <summary>
        /// 插件返回结果
        /// </summary>
        /// <value>插件返回结果</value>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public string Result { get; set; }

        /// <summary>
        /// 当前生成的结果是否被截断
        /// </summary>
        /// <value>当前生成的结果是否被截断</value>
        [DataMember(Name = "is_truncated", EmitDefaultValue = true)]
        public bool IsTruncated { get; set; }

        /// <summary>
        /// 表示用户输入是否存在安全，是否关闭当前会话，清理历史会话信息 true：是，表示用户输入存在安全风险，建议关闭当前会话，清理历史会话信息 false：否，表示用户输入无安全风险
        /// </summary>
        /// <value>表示用户输入是否存在安全，是否关闭当前会话，清理历史会话信息 true：是，表示用户输入存在安全风险，建议关闭当前会话，清理历史会话信息 false：否，表示用户输入无安全风险</value>
        [DataMember(Name = "need_clear_history", EmitDefaultValue = true)]
        public bool NeedClearHistory { get; set; }

        /// <summary>
        /// 当need_clear_history为true时，此字段会告知第几轮对话有敏感信息，如果是当前问题，ban_round &#x3D; -1
        /// </summary>
        /// <value>当need_clear_history为true时，此字段会告知第几轮对话有敏感信息，如果是当前问题，ban_round &#x3D; -1</value>
        [DataMember(Name = "ban_round", EmitDefaultValue = false)]
        public int BanRound { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", EmitDefaultValue = false)]
        public Usage Usage { get; set; }

        /// <summary>
        /// Gets or Sets MetaInfo
        /// </summary>
        [DataMember(Name = "meta_info", EmitDefaultValue = false)]
        public Object MetaInfo { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PluginResponse {\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  SentenceId: ").Append(SentenceId).Append("\n");
            sb.Append("  IsEnd: ").Append(IsEnd).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  IsTruncated: ").Append(IsTruncated).Append("\n");
            sb.Append("  NeedClearHistory: ").Append(NeedClearHistory).Append("\n");
            sb.Append("  BanRound: ").Append(BanRound).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  MetaInfo: ").Append(MetaInfo).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginResponse);
        }

        /// <summary>
        /// Returns true if PluginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogId == input.LogId ||
                    this.LogId.Equals(input.LogId)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VarObject == input.VarObject ||
                    (this.VarObject != null &&
                    this.VarObject.Equals(input.VarObject))
                ) && 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.SentenceId == input.SentenceId ||
                    this.SentenceId.Equals(input.SentenceId)
                ) && 
                (
                    this.IsEnd == input.IsEnd ||
                    this.IsEnd.Equals(input.IsEnd)
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.IsTruncated == input.IsTruncated ||
                    this.IsTruncated.Equals(input.IsTruncated)
                ) && 
                (
                    this.NeedClearHistory == input.NeedClearHistory ||
                    this.NeedClearHistory.Equals(input.NeedClearHistory)
                ) && 
                (
                    this.BanRound == input.BanRound ||
                    this.BanRound.Equals(input.BanRound)
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                ) && 
                (
                    this.MetaInfo == input.MetaInfo ||
                    (this.MetaInfo != null &&
                    this.MetaInfo.Equals(input.MetaInfo))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LogId.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VarObject != null)
                {
                    hashCode = (hashCode * 59) + this.VarObject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.SentenceId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnd.GetHashCode();
                if (this.Result != null)
                {
                    hashCode = (hashCode * 59) + this.Result.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsTruncated.GetHashCode();
                hashCode = (hashCode * 59) + this.NeedClearHistory.GetHashCode();
                hashCode = (hashCode * 59) + this.BanRound.GetHashCode();
                if (this.Usage != null)
                {
                    hashCode = (hashCode * 59) + this.Usage.GetHashCode();
                }
                if (this.MetaInfo != null)
                {
                    hashCode = (hashCode * 59) + this.MetaInfo.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
