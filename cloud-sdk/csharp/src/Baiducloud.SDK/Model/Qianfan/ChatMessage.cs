/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// ChatMessage
    /// </summary>
    [DataContract(Name = "ChatMessage")]
    public partial class ChatMessage : IEquatable<ChatMessage>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public ChatMessageRole Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatMessage()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatMessage" /> class.
        /// </summary>
        /// <param name="role">role (required).</param>
        /// <param name="content">对话内容，说明： （1）当前message存在function_call，且role&#x3D;\&quot;assistant\&quot;时可以为空，其他场景不能为空 （2）最后一个message对应的content不能为blank字符，包含空格、\&quot;\\n\&quot;、“\\r”、“\\f”等 (required).</param>
        /// <param name="name">message作者；当role&#x3D;function时，必填，且是响应内容中function_call中的name.</param>
        /// <param name="functionCall">functionCall.</param>
        public ChatMessage(ChatMessageRole role, string content, string name = default(string), ChatFunctionCall functionCall = default(ChatFunctionCall))
        {
            this.Role = role;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for ChatMessage and cannot be null");
            }
            this.Content = content;
            this.Name = name;
            this.FunctionCall = functionCall;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 对话内容，说明： （1）当前message存在function_call，且role&#x3D;\&quot;assistant\&quot;时可以为空，其他场景不能为空 （2）最后一个message对应的content不能为blank字符，包含空格、\&quot;\\n\&quot;、“\\r”、“\\f”等
        /// </summary>
        /// <value>对话内容，说明： （1）当前message存在function_call，且role&#x3D;\&quot;assistant\&quot;时可以为空，其他场景不能为空 （2）最后一个message对应的content不能为blank字符，包含空格、\&quot;\\n\&quot;、“\\r”、“\\f”等</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// message作者；当role&#x3D;function时，必填，且是响应内容中function_call中的name
        /// </summary>
        /// <value>message作者；当role&#x3D;function时，必填，且是响应内容中function_call中的name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FunctionCall
        /// </summary>
        [DataMember(Name = "function_call", EmitDefaultValue = false)]
        public ChatFunctionCall FunctionCall { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatMessage {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FunctionCall: ").Append(FunctionCall).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChatMessage);
        }

        /// <summary>
        /// Returns true if ChatMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of ChatMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FunctionCall == input.FunctionCall ||
                    (this.FunctionCall != null &&
                    this.FunctionCall.Equals(input.FunctionCall))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Role.GetHashCode();
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FunctionCall != null)
                {
                    hashCode = (hashCode * 59) + this.FunctionCall.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
