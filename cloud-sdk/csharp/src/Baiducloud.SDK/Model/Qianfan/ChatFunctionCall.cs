/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// ChatFunctionCall
    /// </summary>
    [DataContract(Name = "ChatFunctionCall")]
    public partial class ChatFunctionCall : IEquatable<ChatFunctionCall>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatFunctionCall" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatFunctionCall()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatFunctionCall" /> class.
        /// </summary>
        /// <param name="name">触发的function名 (required).</param>
        /// <param name="arguments">请求参数 (required).</param>
        /// <param name="thoughts">模型思考过程.</param>
        public ChatFunctionCall(string name, string arguments, string thoughts = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ChatFunctionCall and cannot be null");
            }
            this.Name = name;
            // to ensure "arguments" is required (not null)
            if (arguments == null)
            {
                throw new ArgumentNullException("arguments is a required property for ChatFunctionCall and cannot be null");
            }
            this.Arguments = arguments;
            this.Thoughts = thoughts;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 触发的function名
        /// </summary>
        /// <value>触发的function名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 请求参数
        /// </summary>
        /// <value>请求参数</value>
        [DataMember(Name = "arguments", IsRequired = true, EmitDefaultValue = true)]
        public string Arguments { get; set; }

        /// <summary>
        /// 模型思考过程
        /// </summary>
        /// <value>模型思考过程</value>
        [DataMember(Name = "thoughts", EmitDefaultValue = false)]
        public string Thoughts { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatFunctionCall {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Thoughts: ").Append(Thoughts).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChatFunctionCall);
        }

        /// <summary>
        /// Returns true if ChatFunctionCall instances are equal
        /// </summary>
        /// <param name="input">Instance of ChatFunctionCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatFunctionCall input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Arguments == input.Arguments ||
                    (this.Arguments != null &&
                    this.Arguments.Equals(input.Arguments))
                ) && 
                (
                    this.Thoughts == input.Thoughts ||
                    (this.Thoughts != null &&
                    this.Thoughts.Equals(input.Thoughts))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Arguments != null)
                {
                    hashCode = (hashCode * 59) + this.Arguments.GetHashCode();
                }
                if (this.Thoughts != null)
                {
                    hashCode = (hashCode * 59) + this.Thoughts.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
