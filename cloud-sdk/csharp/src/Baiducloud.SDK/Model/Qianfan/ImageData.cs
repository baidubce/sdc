/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// ImageData
    /// </summary>
    [DataContract(Name = "ImageData")]
    public partial class ImageData : IEquatable<ImageData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageData()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageData" /> class.
        /// </summary>
        /// <param name="varObject">固定值\&quot;image\&quot;.</param>
        /// <param name="b64Image">图片base64编码内容.</param>
        /// <param name="index">序号.</param>
        public ImageData(string varObject = default(string), string b64Image = default(string), int index = default(int))
        {
            this.VarObject = varObject;
            this.B64Image = b64Image;
            this.Index = index;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 固定值\&quot;image\&quot;
        /// </summary>
        /// <value>固定值\&quot;image\&quot;</value>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public string VarObject { get; set; }

        /// <summary>
        /// 图片base64编码内容
        /// </summary>
        /// <value>图片base64编码内容</value>
        [DataMember(Name = "b64_image", EmitDefaultValue = false)]
        public string B64Image { get; set; }

        /// <summary>
        /// 序号
        /// </summary>
        /// <value>序号</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageData {\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  B64Image: ").Append(B64Image).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageData);
        }

        /// <summary>
        /// Returns true if ImageData instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarObject == input.VarObject ||
                    (this.VarObject != null &&
                    this.VarObject.Equals(input.VarObject))
                ) && 
                (
                    this.B64Image == input.B64Image ||
                    (this.B64Image != null &&
                    this.B64Image.Equals(input.B64Image))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarObject != null)
                {
                    hashCode = (hashCode * 59) + this.VarObject.GetHashCode();
                }
                if (this.B64Image != null)
                {
                    hashCode = (hashCode * 59) + this.B64Image.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
