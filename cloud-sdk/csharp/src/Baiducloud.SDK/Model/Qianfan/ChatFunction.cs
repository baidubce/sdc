/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// ChatFunction
    /// </summary>
    [DataContract(Name = "ChatFunction")]
    public partial class ChatFunction : IEquatable<ChatFunction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatFunction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatFunction()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatFunction" /> class.
        /// </summary>
        /// <param name="name">函数名 (required).</param>
        /// <param name="description">函数描述 (required).</param>
        /// <param name="parameters">函数请求参数，说明： （1）JSON Schema 格式，参考JSON Schema描述 （2）如果函数没有请求参数，parameters值格式如下： {\&quot;type\&quot;: \&quot;object\&quot;,\&quot;properties\&quot;: {}} (required).</param>
        /// <param name="responses">函数响应参数，JSON Schema 格式，参考JSON Schema描述.</param>
        /// <param name="examples">function调用的一些历史示例.</param>
        public ChatFunction(string name, string description, Dictionary<string, Object> parameters, Dictionary<string, Object> responses = default(Dictionary<string, Object>), List<ChatMessage> examples = default(List<ChatMessage>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ChatFunction and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ChatFunction and cannot be null");
            }
            this.Description = description;
            // to ensure "parameters" is required (not null)
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters is a required property for ChatFunction and cannot be null");
            }
            this.Parameters = parameters;
            this.Responses = responses;
            this.Examples = examples;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 函数名
        /// </summary>
        /// <value>函数名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 函数描述
        /// </summary>
        /// <value>函数描述</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// 函数请求参数，说明： （1）JSON Schema 格式，参考JSON Schema描述 （2）如果函数没有请求参数，parameters值格式如下： {\&quot;type\&quot;: \&quot;object\&quot;,\&quot;properties\&quot;: {}}
        /// </summary>
        /// <value>函数请求参数，说明： （1）JSON Schema 格式，参考JSON Schema描述 （2）如果函数没有请求参数，parameters值格式如下： {\&quot;type\&quot;: \&quot;object\&quot;,\&quot;properties\&quot;: {}}</value>
        [DataMember(Name = "parameters", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Parameters { get; set; }

        /// <summary>
        /// 函数响应参数，JSON Schema 格式，参考JSON Schema描述
        /// </summary>
        /// <value>函数响应参数，JSON Schema 格式，参考JSON Schema描述</value>
        [DataMember(Name = "responses", EmitDefaultValue = false)]
        public Dictionary<string, Object> Responses { get; set; }

        /// <summary>
        /// function调用的一些历史示例
        /// </summary>
        /// <value>function调用的一些历史示例</value>
        [DataMember(Name = "examples", EmitDefaultValue = false)]
        public List<ChatMessage> Examples { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatFunction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Responses: ").Append(Responses).Append("\n");
            sb.Append("  Examples: ").Append(Examples).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChatFunction);
        }

        /// <summary>
        /// Returns true if ChatFunction instances are equal
        /// </summary>
        /// <param name="input">Instance of ChatFunction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatFunction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Responses == input.Responses ||
                    this.Responses != null &&
                    input.Responses != null &&
                    this.Responses.SequenceEqual(input.Responses)
                ) && 
                (
                    this.Examples == input.Examples ||
                    this.Examples != null &&
                    input.Examples != null &&
                    this.Examples.SequenceEqual(input.Examples)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Responses != null)
                {
                    hashCode = (hashCode * 59) + this.Responses.GetHashCode();
                }
                if (this.Examples != null)
                {
                    hashCode = (hashCode * 59) + this.Examples.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
