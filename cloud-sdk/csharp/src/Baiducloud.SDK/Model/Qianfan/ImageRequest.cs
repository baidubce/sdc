/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// ImageRequest
    /// </summary>
    [DataContract(Name = "ImageRequest")]
    public partial class ImageRequest : IEquatable<ImageRequest>, IValidatableObject
    {
        /// <summary>
        /// 生成图片长宽，默认值 1024x1024
        /// </summary>
        /// <value>生成图片长宽，默认值 1024x1024</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum _768x768 for value: 768x768
            /// </summary>
            [EnumMember(Value = "768x768")]
            _768x768 = 1,

            /// <summary>
            /// Enum _768x1024 for value: 768x1024
            /// </summary>
            [EnumMember(Value = "768x1024")]
            _768x1024 = 2,

            /// <summary>
            /// Enum _1024x768 for value: 1024x768
            /// </summary>
            [EnumMember(Value = "1024x768")]
            _1024x768 = 3,

            /// <summary>
            /// Enum _576x1024 for value: 576x1024
            /// </summary>
            [EnumMember(Value = "576x1024")]
            _576x1024 = 4,

            /// <summary>
            /// Enum _1024x576 for value: 1024x576
            /// </summary>
            [EnumMember(Value = "1024x576")]
            _1024x576 = 5
        }


        /// <summary>
        /// 生成图片长宽，默认值 1024x1024
        /// </summary>
        /// <value>生成图片长宽，默认值 1024x1024</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// 采样方式
        /// </summary>
        /// <value>采样方式</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SamplerIndexEnum
        {
            /// <summary>
            /// Enum Euler for value: Euler
            /// </summary>
            [EnumMember(Value = "Euler")]
            Euler = 1,

            /// <summary>
            /// Enum EulerA for value: Euler a
            /// </summary>
            [EnumMember(Value = "Euler a")]
            EulerA = 2,

            /// <summary>
            /// Enum DPM2M for value: DPM++ 2M
            /// </summary>
            [EnumMember(Value = "DPM++ 2M")]
            DPM2M = 3,

            /// <summary>
            /// Enum DPM2MKarras for value: DPM++ 2M Karras
            /// </summary>
            [EnumMember(Value = "DPM++ 2M Karras")]
            DPM2MKarras = 4,

            /// <summary>
            /// Enum LMSKarras for value: LMS Karras
            /// </summary>
            [EnumMember(Value = "LMS Karras")]
            LMSKarras = 5,

            /// <summary>
            /// Enum DPMSDE for value: DPM++ SDE
            /// </summary>
            [EnumMember(Value = "DPM++ SDE")]
            DPMSDE = 6,

            /// <summary>
            /// Enum DPMSDEKarras for value: DPM++ SDE Karras
            /// </summary>
            [EnumMember(Value = "DPM++ SDE Karras")]
            DPMSDEKarras = 7,

            /// <summary>
            /// Enum DPM2AKarras for value: DPM2 a Karras
            /// </summary>
            [EnumMember(Value = "DPM2 a Karras")]
            DPM2AKarras = 8,

            /// <summary>
            /// Enum Heun for value: Heun
            /// </summary>
            [EnumMember(Value = "Heun")]
            Heun = 9,

            /// <summary>
            /// Enum DPM2MSDE for value: DPM++ 2M SDE
            /// </summary>
            [EnumMember(Value = "DPM++ 2M SDE")]
            DPM2MSDE = 10,

            /// <summary>
            /// Enum DPM2MSDEKarras for value: DPM++ 2M SDE Karras
            /// </summary>
            [EnumMember(Value = "DPM++ 2M SDE Karras")]
            DPM2MSDEKarras = 11,

            /// <summary>
            /// Enum DPM2 for value: DPM2
            /// </summary>
            [EnumMember(Value = "DPM2")]
            DPM2 = 12,

            /// <summary>
            /// Enum DPM2Karras for value: DPM2 Karras
            /// </summary>
            [EnumMember(Value = "DPM2 Karras")]
            DPM2Karras = 13,

            /// <summary>
            /// Enum DPM2A for value: DPM2 a
            /// </summary>
            [EnumMember(Value = "DPM2 a")]
            DPM2A = 14,

            /// <summary>
            /// Enum LMS for value: LMS
            /// </summary>
            [EnumMember(Value = "LMS")]
            LMS = 15
        }


        /// <summary>
        /// 采样方式
        /// </summary>
        /// <value>采样方式</value>
        [DataMember(Name = "sampler_index", EmitDefaultValue = false)]
        public SamplerIndexEnum? SamplerIndex { get; set; }
        /// <summary>
        /// 生成风格
        /// </summary>
        /// <value>生成风格</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum Base for value: Base
            /// </summary>
            [EnumMember(Value = "Base")]
            Base = 1,

            /// <summary>
            /// Enum _3DModel for value: 3D Model
            /// </summary>
            [EnumMember(Value = "3D Model")]
            _3DModel = 2,

            /// <summary>
            /// Enum AnalogFilm for value: Analog Film
            /// </summary>
            [EnumMember(Value = "Analog Film")]
            AnalogFilm = 3,

            /// <summary>
            /// Enum Anime for value: Anime
            /// </summary>
            [EnumMember(Value = "Anime")]
            Anime = 4,

            /// <summary>
            /// Enum Cinematic for value: Cinematic
            /// </summary>
            [EnumMember(Value = "Cinematic")]
            Cinematic = 5,

            /// <summary>
            /// Enum ComicBook for value: Comic Book
            /// </summary>
            [EnumMember(Value = "Comic Book")]
            ComicBook = 6,

            /// <summary>
            /// Enum CraftClay for value: Craft Clay
            /// </summary>
            [EnumMember(Value = "Craft Clay")]
            CraftClay = 7,

            /// <summary>
            /// Enum DigitalArt for value: Digital Art
            /// </summary>
            [EnumMember(Value = "Digital Art")]
            DigitalArt = 8,

            /// <summary>
            /// Enum Enhance for value: Enhance
            /// </summary>
            [EnumMember(Value = "Enhance")]
            Enhance = 9,

            /// <summary>
            /// Enum FantasyArt for value: Fantasy Art
            /// </summary>
            [EnumMember(Value = "Fantasy Art")]
            FantasyArt = 10,

            /// <summary>
            /// Enum Lsometric for value: lsometric
            /// </summary>
            [EnumMember(Value = "lsometric")]
            Lsometric = 11,

            /// <summary>
            /// Enum LineArt for value: Line Art
            /// </summary>
            [EnumMember(Value = "Line Art")]
            LineArt = 12,

            /// <summary>
            /// Enum Lowpoly for value: Lowpoly
            /// </summary>
            [EnumMember(Value = "Lowpoly")]
            Lowpoly = 13,

            /// <summary>
            /// Enum Neonpunk for value: Neonpunk
            /// </summary>
            [EnumMember(Value = "Neonpunk")]
            Neonpunk = 14,

            /// <summary>
            /// Enum Origami for value: Origami
            /// </summary>
            [EnumMember(Value = "Origami")]
            Origami = 15,

            /// <summary>
            /// Enum Photographic for value: Photographic
            /// </summary>
            [EnumMember(Value = "Photographic")]
            Photographic = 16,

            /// <summary>
            /// Enum PixelArt for value: Pixel Art
            /// </summary>
            [EnumMember(Value = "Pixel Art")]
            PixelArt = 17,

            /// <summary>
            /// Enum Texture for value: Texture
            /// </summary>
            [EnumMember(Value = "Texture")]
            Texture = 18
        }


        /// <summary>
        /// 生成风格
        /// </summary>
        /// <value>生成风格</value>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImageRequest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageRequest" /> class.
        /// </summary>
        /// <param name="prompt">提示词，即用户希望图片包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个 (required).</param>
        /// <param name="negativePrompt">反向提示词，即用户希望图片不包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个.</param>
        /// <param name="size">生成图片长宽，默认值 1024x1024.</param>
        /// <param name="n">生成图片数量，说明： · 默认值为1 · 取值范围为1-4 · 单次生成的图片较多及请求较频繁可能导致请求超时.</param>
        /// <param name="steps">迭代轮次，说明： · 默认值为20 · 取值范围为10-50.</param>
        /// <param name="samplerIndex">采样方式.</param>
        /// <param name="seed">随机种子，说明： · 不设置时，自动生成随机数 · 取值范围 [0, 4294967295].</param>
        /// <param name="cfgScale">提示词相关性，说明：默认值为5，取值范围0-30.</param>
        /// <param name="style">生成风格.</param>
        /// <param name="userId">表示最终用户的唯一标识符，可以监视和检测滥用行为，防止接口恶意调用.</param>
        public ImageRequest(string prompt, string negativePrompt = default(string), SizeEnum? size = default(SizeEnum?), int n = default(int), int steps = default(int), SamplerIndexEnum? samplerIndex = default(SamplerIndexEnum?), long seed = default(long), decimal cfgScale = default(decimal), StyleEnum? style = default(StyleEnum?), string userId = default(string))
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for ImageRequest and cannot be null");
            }
            this.Prompt = prompt;
            this.NegativePrompt = negativePrompt;
            this.Size = size;
            this.N = n;
            this.Steps = steps;
            this.SamplerIndex = samplerIndex;
            this.Seed = seed;
            this.CfgScale = cfgScale;
            this.Style = style;
            this.UserId = userId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 提示词，即用户希望图片包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个
        /// </summary>
        /// <value>提示词，即用户希望图片包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个</value>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// 反向提示词，即用户希望图片不包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个
        /// </summary>
        /// <value>反向提示词，即用户希望图片不包含的元素。长度限制为1024字符，建议中文或者英文单词总数量不超过150个</value>
        [DataMember(Name = "negative_prompt", EmitDefaultValue = false)]
        public string NegativePrompt { get; set; }

        /// <summary>
        /// 生成图片数量，说明： · 默认值为1 · 取值范围为1-4 · 单次生成的图片较多及请求较频繁可能导致请求超时
        /// </summary>
        /// <value>生成图片数量，说明： · 默认值为1 · 取值范围为1-4 · 单次生成的图片较多及请求较频繁可能导致请求超时</value>
        [DataMember(Name = "n", EmitDefaultValue = false)]
        public int N { get; set; }

        /// <summary>
        /// 迭代轮次，说明： · 默认值为20 · 取值范围为10-50
        /// </summary>
        /// <value>迭代轮次，说明： · 默认值为20 · 取值范围为10-50</value>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public int Steps { get; set; }

        /// <summary>
        /// 随机种子，说明： · 不设置时，自动生成随机数 · 取值范围 [0, 4294967295]
        /// </summary>
        /// <value>随机种子，说明： · 不设置时，自动生成随机数 · 取值范围 [0, 4294967295]</value>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public long Seed { get; set; }

        /// <summary>
        /// 提示词相关性，说明：默认值为5，取值范围0-30
        /// </summary>
        /// <value>提示词相关性，说明：默认值为5，取值范围0-30</value>
        [DataMember(Name = "cfg_scale", EmitDefaultValue = false)]
        public decimal CfgScale { get; set; }

        /// <summary>
        /// 表示最终用户的唯一标识符，可以监视和检测滥用行为，防止接口恶意调用
        /// </summary>
        /// <value>表示最终用户的唯一标识符，可以监视和检测滥用行为，防止接口恶意调用</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageRequest {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  NegativePrompt: ").Append(NegativePrompt).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  SamplerIndex: ").Append(SamplerIndex).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  CfgScale: ").Append(CfgScale).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageRequest);
        }

        /// <summary>
        /// Returns true if ImageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                ) && 
                (
                    this.NegativePrompt == input.NegativePrompt ||
                    (this.NegativePrompt != null &&
                    this.NegativePrompt.Equals(input.NegativePrompt))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.N == input.N ||
                    this.N.Equals(input.N)
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps.Equals(input.Steps)
                ) && 
                (
                    this.SamplerIndex == input.SamplerIndex ||
                    this.SamplerIndex.Equals(input.SamplerIndex)
                ) && 
                (
                    this.Seed == input.Seed ||
                    this.Seed.Equals(input.Seed)
                ) && 
                (
                    this.CfgScale == input.CfgScale ||
                    this.CfgScale.Equals(input.CfgScale)
                ) && 
                (
                    this.Style == input.Style ||
                    this.Style.Equals(input.Style)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Prompt != null)
                {
                    hashCode = (hashCode * 59) + this.Prompt.GetHashCode();
                }
                if (this.NegativePrompt != null)
                {
                    hashCode = (hashCode * 59) + this.NegativePrompt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                hashCode = (hashCode * 59) + this.N.GetHashCode();
                hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                hashCode = (hashCode * 59) + this.SamplerIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                hashCode = (hashCode * 59) + this.CfgScale.GetHashCode();
                hashCode = (hashCode * 59) + this.Style.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // N (int) maximum
            if (this.N > (int)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for N, must be a value less than or equal to 4.", new [] { "N" });
            }

            // N (int) minimum
            if (this.N < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for N, must be a value greater than or equal to 1.", new [] { "N" });
            }

            // Steps (int) maximum
            if (this.Steps > (int)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Steps, must be a value less than or equal to 50.", new [] { "Steps" });
            }

            // Steps (int) minimum
            if (this.Steps < (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Steps, must be a value greater than or equal to 10.", new [] { "Steps" });
            }

            // Seed (long) maximum
            if (this.Seed > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seed, must be a value less than or equal to 4294967295.", new [] { "Seed" });
            }

            // Seed (long) minimum
            if (this.Seed < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seed, must be a value greater than or equal to 0.", new [] { "Seed" });
            }

            // CfgScale (decimal) maximum
            if (this.CfgScale > (decimal)30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfgScale, must be a value less than or equal to 30.", new [] { "CfgScale" });
            }

            // CfgScale (decimal) minimum
            if (this.CfgScale < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfgScale, must be a value greater than or equal to 0.", new [] { "CfgScale" });
            }

            yield break;
        }
    }

}
