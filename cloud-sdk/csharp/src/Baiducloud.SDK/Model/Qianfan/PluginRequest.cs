/*
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Baiducloud.SDK.Client.FileParameter;
using OpenAPIDateConverter = Baiducloud.SDK.Client.OpenAPIDateConverter;
using Baiducloud.SDK.Client;

namespace Baiducloud.SDK.Model.Qianfan
{
    /// <summary>
    /// PluginRequest
    /// </summary>
    [DataContract(Name = "pluginRequest")]
    public partial class PluginRequest : IEquatable<PluginRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PluginRequest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginRequest" /> class.
        /// </summary>
        /// <param name="query">查询信息。说明： （1）成员不能为空 （2）长度不能超过1000个字符 (required).</param>
        /// <param name="plugins">需要调用的插件ID列表.</param>
        /// <param name="stream">是否以流式接口的形式返回数据，默认false，可选值如下： （1）true: 是，以流式接口的形式返回数据 （2）false：否，非流式接口形式返回数据.</param>
        /// <param name="llm">llm相关参数，不指定参数时，使用调试过程中的默认值。 参数示例：\&quot;llm\&quot;:{\&quot;temperature\&quot;:0.1,\&quot;top_p\&quot;:1,\&quot;penalty_score\&quot;:1}.</param>
        /// <param name="inputVariables">说明： （1）如果prompt中使用了变量，推理时可以填写具体值； （2）如果prompt中未使用变量，该字段不填。 参数示例：\&quot;input_variables\&quot;：{\&quot;key1\&quot;:\&quot;value1\&quot;,\&quot;key2\&quot;:\&quot;value2\&quot;,} key1、key2为配置时prompt中使用了变量key.</param>
        /// <param name="history">history.</param>
        /// <param name="verbose">是否返回插件的原始请求信息，默认false，可选值如下： true：是，返回插件的原始请求信息meta_info false：否，不返回插件的原始请求信息meta_info.</param>
        public PluginRequest(string query, List<string> plugins = default(List<string>), bool stream = default(bool), Object llm = default(Object), Object inputVariables = default(Object), ChatMessage history = default(ChatMessage), bool verbose = default(bool))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for PluginRequest and cannot be null");
            }
            this.Query = query;
            this.Plugins = plugins;
            this.Stream = stream;
            this.Llm = llm;
            this.InputVariables = inputVariables;
            this.History = history;
            this.Verbose = verbose;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// 查询信息。说明： （1）成员不能为空 （2）长度不能超过1000个字符
        /// </summary>
        /// <value>查询信息。说明： （1）成员不能为空 （2）长度不能超过1000个字符</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// 需要调用的插件ID列表
        /// </summary>
        /// <value>需要调用的插件ID列表</value>
        [DataMember(Name = "plugins", EmitDefaultValue = false)]
        public List<string> Plugins { get; set; }

        /// <summary>
        /// 是否以流式接口的形式返回数据，默认false，可选值如下： （1）true: 是，以流式接口的形式返回数据 （2）false：否，非流式接口形式返回数据
        /// </summary>
        /// <value>是否以流式接口的形式返回数据，默认false，可选值如下： （1）true: 是，以流式接口的形式返回数据 （2）false：否，非流式接口形式返回数据</value>
        [DataMember(Name = "stream", EmitDefaultValue = true)]
        public bool Stream { get; set; }

        /// <summary>
        /// llm相关参数，不指定参数时，使用调试过程中的默认值。 参数示例：\&quot;llm\&quot;:{\&quot;temperature\&quot;:0.1,\&quot;top_p\&quot;:1,\&quot;penalty_score\&quot;:1}
        /// </summary>
        /// <value>llm相关参数，不指定参数时，使用调试过程中的默认值。 参数示例：\&quot;llm\&quot;:{\&quot;temperature\&quot;:0.1,\&quot;top_p\&quot;:1,\&quot;penalty_score\&quot;:1}</value>
        [DataMember(Name = "llm", EmitDefaultValue = false)]
        public Object Llm { get; set; }

        /// <summary>
        /// 说明： （1）如果prompt中使用了变量，推理时可以填写具体值； （2）如果prompt中未使用变量，该字段不填。 参数示例：\&quot;input_variables\&quot;：{\&quot;key1\&quot;:\&quot;value1\&quot;,\&quot;key2\&quot;:\&quot;value2\&quot;,} key1、key2为配置时prompt中使用了变量key
        /// </summary>
        /// <value>说明： （1）如果prompt中使用了变量，推理时可以填写具体值； （2）如果prompt中未使用变量，该字段不填。 参数示例：\&quot;input_variables\&quot;：{\&quot;key1\&quot;:\&quot;value1\&quot;,\&quot;key2\&quot;:\&quot;value2\&quot;,} key1、key2为配置时prompt中使用了变量key</value>
        [DataMember(Name = "input_variables", EmitDefaultValue = false)]
        public Object InputVariables { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name = "history", EmitDefaultValue = false)]
        public ChatMessage History { get; set; }

        /// <summary>
        /// 是否返回插件的原始请求信息，默认false，可选值如下： true：是，返回插件的原始请求信息meta_info false：否，不返回插件的原始请求信息meta_info
        /// </summary>
        /// <value>是否返回插件的原始请求信息，默认false，可选值如下： true：是，返回插件的原始请求信息meta_info false：否，不返回插件的原始请求信息meta_info</value>
        [DataMember(Name = "verbose", EmitDefaultValue = true)]
        public bool Verbose { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PluginRequest {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  Llm: ").Append(Llm).Append("\n");
            sb.Append("  InputVariables: ").Append(InputVariables).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Verbose: ").Append(Verbose).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginRequest);
        }

        /// <summary>
        /// Returns true if PluginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Plugins == input.Plugins ||
                    this.Plugins != null &&
                    input.Plugins != null &&
                    this.Plugins.SequenceEqual(input.Plugins)
                ) && 
                (
                    this.Stream == input.Stream ||
                    this.Stream.Equals(input.Stream)
                ) && 
                (
                    this.Llm == input.Llm ||
                    (this.Llm != null &&
                    this.Llm.Equals(input.Llm))
                ) && 
                (
                    this.InputVariables == input.InputVariables ||
                    (this.InputVariables != null &&
                    this.InputVariables.Equals(input.InputVariables))
                ) && 
                (
                    this.History == input.History ||
                    (this.History != null &&
                    this.History.Equals(input.History))
                ) && 
                (
                    this.Verbose == input.Verbose ||
                    this.Verbose.Equals(input.Verbose)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Plugins != null)
                {
                    hashCode = (hashCode * 59) + this.Plugins.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stream.GetHashCode();
                if (this.Llm != null)
                {
                    hashCode = (hashCode * 59) + this.Llm.GetHashCode();
                }
                if (this.InputVariables != null)
                {
                    hashCode = (hashCode * 59) + this.InputVariables.GetHashCode();
                }
                if (this.History != null)
                {
                    hashCode = (hashCode * 59) + this.History.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Verbose.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Query (string) maxLength
            if (this.Query != null && this.Query.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Query, length must be less than 1000.", new [] { "Query" });
            }

            yield break;
        }
    }

}
